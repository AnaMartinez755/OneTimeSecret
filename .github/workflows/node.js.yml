# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  code-check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npx eslint .
      - run: npx eslint --format html . > report.html
      - run: npm test unit.test.ts server.test.ts --forceExit --coverage
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Test with coverage
        id: test
        run: npm test unit.test.ts server.test.ts --forceExit --coverage

      - name: Get coverage percentage
        id: get-coverage
        run: |
          coverage=$(node -e "console.log(parseInt('${{ steps.test.outputs.coverage }}'.split('%')[0]))")
          echo "::set-output name=coverage::${coverage}"
      - name: Validate coverage
        run: |
          threshold=70
          if [ "${{ steps.get-coverage.outputs.coverage }}" -lt "${threshold}" ]; then
            echo "Code coverage below ${threshold}%"
            exit 1
          fi
  docker:
    runs-on: ubuntu-latest
    needs: code-check

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/one_secret_app:latest, ${{ secrets.DOCKERHUB_USERNAME }}/one_secret_app:${{ github.run_number }}
      - name: Start container
        run: |
          docker-compose up -d
